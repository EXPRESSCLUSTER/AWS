name: InstallECXonLinux
description: 'This document will download and install ECX on RedHat Linux.'
schemaVersion: 1.0
parameters:
  - ECXrpm:
      type: string
      default: 'expresscls-5.2.0-1.x86_64.rpm'
      description: ExpressCluster installation rpm file
  - LicAlrt:
      type: string
      default: 'X5_Alrt_Lin.key'
      description: ExpressCluster Alert Service license
  - LicBase:
      type: string
      default: 'X5_Base_Lin.key'
      description: ExpressCluster Base license
  - LicRepl:
      type: string
      default: 'X5_Repl_Lin.key'
      description: ExpressCluster Replication license
  - S3Bucket:
      type: string
      default: 'ecxbucket'
      description: AWS S3 Bucket

phases:
  - name: build
    steps:
      - name: CreateTempFolder
        action: CreateFolder
        timeoutSeconds: 60
        onFailure: Abort
        maxAttempts: 3
        inputs:
          - path: /tmp/ecxinstall

      - name: GetDetails
        action: ExecuteBash
        inputs:
          commands:
            - 'echo Created folder is: {{build.CreateTempFolder.inputs[0].path}}'
            - 'uname -r'
            - 'cat /etc/os-release'

      - name: DownloadECXInstall
        action: S3Download
        onFailure: Abort
        inputs:
          - source: 's3://{{S3Bucket}}/{{ECXrpm}}'
            destination: '{{build.CreateTempFolder.inputs[0].path}}/{{ECXrpm}}'

      - name: InstallECX
        action: ExecuteBash
        onFailure: Abort
        inputs:
          commands:
            - 'sudo rpm -i {{ build.DownloadECXInstall.inputs[0].destination }}'

      - name: DownloadLicenses
        action: S3Download
        onFailure: Abort
        inputs:
          - source: 's3://{{S3Bucket}}/{{LicAlrt}}'
            destination: '{{build.CreateTempFolder.inputs[0].path}}/{{LicAlrt}}'
          - source: 's3://{{S3Bucket}}/{{LicBase}}'
            destination: '{{build.CreateTempFolder.inputs[0].path}}/{{LicBase}}'
          - source: 's3://{{S3Bucket}}/{{LicRepl}}'
            destination: '{{build.CreateTempFolder.inputs[0].path}}/{{LicRepl}}'

      - name: RegLicenses
        action: ExecuteBash
        onFailure: Abort
        inputs:
          commands:
            - sudo clplcnsc -i {{build.CreateTempFolder.inputs[0].path}}/*.key

      - name: CheckFirewall
        action: ExecuteBash
        onFailure: Continue
        inputs:
          commands:
            - |
              FW=firewall-cmd
              which $FW > /dev/null 2>&1
              if [ $? -ne 0 ]; then
                echo "'$FW' is not installed"
                #exit ${FWCTRL_ERR_CMDNOTFOUND}
                echo "Installing firewalld"
                sudo yum -y install firewalld
                sudo systemctl start firewalld
                sudo firewall-cmd --state
                sudo systemctl enable firewalld
                echo "Open ports"
              else
                echo "'$FW' is installed."
                echo "Open ports"
              fi

      - name: OpenFirewall
        action: ExecuteBash
        onFailure: Continue
        inputs:
          commands:
            # Open ports through firewall
            - sudo clpfwctrl.sh --add
            # Disable SELinux
            - sudo sed -i -e 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config
            # Disable caching of repositories
            - sudo systemctl disable dnf-makecache.timer

      - name: CleanUp
        action: DeleteFolder
        onFailure: Abort
        maxAttempts: 3
        inputs:
          - path: '{{build.CreateTempFolder.inputs[0].path}}'
            force: true

      - name: Reboot
        action: Reboot
        onFailure: Continue
        inputs:
          delaySeconds: 60

  - name: validate
    steps:
      - name: GetDetails2
        action: ExecuteBash
        inputs:
          commands:
            - echo "ExpressCluster licenses"
            - sudo clplcnsc -l | grep -i 'cluster'
            - echo "SELINUX state"
            - sudo cat /etc/selinux/config | grep 'SELINUX='
            - uname -a
            - echo "Firewall state"
            - sudo firewall-cmd --state
            - echo "Open ports"
            - sudo firewall-cmd --info-service=clusterpro | grep 'ports'
